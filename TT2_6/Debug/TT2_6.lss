
TT2_6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  00000da2  00000e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007a  0080012a  0080012a  00000e60  2**0
                  ALLOC
  3 .stab         00002058  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000070b  00000000  00000000  00002eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000035c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000096e  00000000  00000000  00003668  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000158  00000000  00000000  00003fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e8  00000000  00000000  0000412e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00004518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000014f  00000000  00000000  00004678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000031d  00000000  00000000  000047c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4f 04 	jmp	0x89e	; 0x89e <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 29 02 	jmp	0x452	; 0x452 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ea       	ldi	r30, 0xA2	; 162
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 32       	cpi	r26, 0x2A	; 42
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	aa e2       	ldi	r26, 0x2A	; 42
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3a       	cpi	r26, 0xA4	; 164
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 63 04 	call	0x8c6	; 0x8c6 <main>
  9e:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
int h = -1;



ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
	rec[k] = (int)UDR0;
  c4:	20 91 78 01 	lds	r18, 0x0178
  c8:	30 91 79 01 	lds	r19, 0x0179
  cc:	40 91 c6 00 	lds	r20, 0x00C6
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	c9 01       	movw	r24, r18
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	fc 01       	movw	r30, r24
  da:	e2 5e       	subi	r30, 0xE2	; 226
  dc:	fe 4f       	sbci	r31, 0xFE	; 254
  de:	51 83       	std	Z+1, r21	; 0x01
  e0:	40 83       	st	Z, r20
	rec1[k] = rec[k] & 0x0F;
  e2:	88 56       	subi	r24, 0x68	; 104
  e4:	9e 4f       	sbci	r25, 0xFE	; 254
  e6:	4f 70       	andi	r20, 0x0F	; 15
  e8:	50 70       	andi	r21, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	51 83       	std	Z+1, r21	; 0x01
  ee:	40 83       	st	Z, r20
	if (k>3)
  f0:	24 30       	cpi	r18, 0x04	; 4
  f2:	31 05       	cpc	r19, r1
  f4:	0c f4       	brge	.+2      	; 0xf8 <__vector_18+0x52>
  f6:	98 c1       	rjmp	.+816    	; 0x428 <__vector_18+0x382>
	{
		//se revisan que todos los datos estén dentro de los valores esperados
		//primer valor sea una "t"
		//el segundo valor este comprendido entre 1 y 3
		//y los tres valores posteriores sean números
		if ((rec[0] == 116) & (rec[1]>48 & rec[1]<53) & (rec[2] >= 48 & rec[2]<=57) & (rec[3] >= 48 & rec[3]<=57) & (rec[4] >= 48 & rec[4]<=57))
  f8:	60 91 1e 01 	lds	r22, 0x011E
  fc:	70 91 1f 01 	lds	r23, 0x011F
 100:	80 91 24 01 	lds	r24, 0x0124
 104:	90 91 25 01 	lds	r25, 0x0125
 108:	c0 97       	sbiw	r24, 0x30	; 48
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	8a 30       	cpi	r24, 0x0A	; 10
 110:	91 05       	cpc	r25, r1
 112:	10 f0       	brcs	.+4      	; 0x118 <__vector_18+0x72>
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	20 91 22 01 	lds	r18, 0x0122
 11c:	30 91 23 01 	lds	r19, 0x0123
 120:	20 53       	subi	r18, 0x30	; 48
 122:	30 40       	sbci	r19, 0x00	; 0
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	2a 30       	cpi	r18, 0x0A	; 10
 12a:	31 05       	cpc	r19, r1
 12c:	10 f0       	brcs	.+4      	; 0x132 <__vector_18+0x8c>
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	48 23       	and	r20, r24
 134:	59 23       	and	r21, r25
 136:	20 91 26 01 	lds	r18, 0x0126
 13a:	30 91 27 01 	lds	r19, 0x0127
 13e:	20 53       	subi	r18, 0x30	; 48
 140:	30 40       	sbci	r19, 0x00	; 0
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	2a 30       	cpi	r18, 0x0A	; 10
 148:	31 05       	cpc	r19, r1
 14a:	10 f0       	brcs	.+4      	; 0x150 <__vector_18+0xaa>
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	84 23       	and	r24, r20
 152:	95 23       	and	r25, r21
 154:	41 e0       	ldi	r20, 0x01	; 1
 156:	64 37       	cpi	r22, 0x74	; 116
 158:	71 05       	cpc	r23, r1
 15a:	09 f0       	breq	.+2      	; 0x15e <__vector_18+0xb8>
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	20 91 20 01 	lds	r18, 0x0120
 162:	30 91 21 01 	lds	r19, 0x0121
 166:	21 53       	subi	r18, 0x31	; 49
 168:	30 40       	sbci	r19, 0x00	; 0
 16a:	51 e0       	ldi	r21, 0x01	; 1
 16c:	24 30       	cpi	r18, 0x04	; 4
 16e:	31 05       	cpc	r19, r1
 170:	08 f0       	brcs	.+2      	; 0x174 <__vector_18+0xce>
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	45 23       	and	r20, r21
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	84 23       	and	r24, r20
 17a:	95 23       	and	r25, r21
 17c:	00 97       	sbiw	r24, 0x00	; 0
 17e:	09 f4       	brne	.+2      	; 0x182 <__vector_18+0xdc>
 180:	45 c0       	rjmp	.+138    	; 0x20c <__vector_18+0x166>
		{
			k=0;
 182:	10 92 79 01 	sts	0x0179, r1
 186:	10 92 78 01 	sts	0x0178, r1
			tempc[rec1[1]-1] = rec1[2]*100+rec1[3]*10+rec1[4];
 18a:	e0 91 9a 01 	lds	r30, 0x019A
 18e:	f0 91 9b 01 	lds	r31, 0x019B
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e2 59       	subi	r30, 0x92	; 146
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	20 91 9c 01 	lds	r18, 0x019C
 19e:	30 91 9d 01 	lds	r19, 0x019D
 1a2:	84 e6       	ldi	r24, 0x64	; 100
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	28 9f       	mul	r18, r24
 1a8:	a0 01       	movw	r20, r0
 1aa:	29 9f       	mul	r18, r25
 1ac:	50 0d       	add	r21, r0
 1ae:	38 9f       	mul	r19, r24
 1b0:	50 0d       	add	r21, r0
 1b2:	11 24       	eor	r1, r1
 1b4:	80 91 9e 01 	lds	r24, 0x019E
 1b8:	90 91 9f 01 	lds	r25, 0x019F
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	9c 01       	movw	r18, r24
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	22 0f       	add	r18, r18
 1c8:	33 1f       	adc	r19, r19
 1ca:	82 0f       	add	r24, r18
 1cc:	93 1f       	adc	r25, r19
 1ce:	48 0f       	add	r20, r24
 1d0:	59 1f       	adc	r21, r25
 1d2:	60 91 a0 01 	lds	r22, 0x01A0
 1d6:	70 91 a1 01 	lds	r23, 0x01A1
 1da:	46 0f       	add	r20, r22
 1dc:	57 1f       	adc	r21, r23
 1de:	51 83       	std	Z+1, r21	; 0x01
 1e0:	40 83       	st	Z, r20
			rec[0] = 0;
 1e2:	10 92 1f 01 	sts	0x011F, r1
 1e6:	10 92 1e 01 	sts	0x011E, r1
			rec[1] = 0;
 1ea:	10 92 21 01 	sts	0x0121, r1
 1ee:	10 92 20 01 	sts	0x0120, r1
			rec[2] = 0;
 1f2:	10 92 23 01 	sts	0x0123, r1
 1f6:	10 92 22 01 	sts	0x0122, r1
			rec[3] = 0;
 1fa:	10 92 25 01 	sts	0x0125, r1
 1fe:	10 92 24 01 	sts	0x0124, r1
			rec[4] = 0;
 202:	10 92 27 01 	sts	0x0127, r1
 206:	10 92 26 01 	sts	0x0126, r1
 20a:	14 c1       	rjmp	.+552    	; 0x434 <__vector_18+0x38e>
		}else if (rec[0] == 105) //empezar todo el proceso
 20c:	69 36       	cpi	r22, 0x69	; 105
 20e:	71 05       	cpc	r23, r1
 210:	21 f5       	brne	.+72     	; 0x25a <__vector_18+0x1b4>
		{
			TIMSK0 |= (1<<OCIE0A);//se activan las interrupciones que controlan la temperatura y la velocidad del motor
 212:	ee e6       	ldi	r30, 0x6E	; 110
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	80 83       	st	Z, r24
			TIMSK2 |= (1<<TOIE2);
 21c:	e0 e7       	ldi	r30, 0x70	; 112
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	81 60       	ori	r24, 0x01	; 1
 224:	80 83       	st	Z, r24
			PORTB &= ~(1<<LED);
 226:	28 98       	cbi	0x05, 0	; 5
			k=0;
 228:	10 92 79 01 	sts	0x0179, r1
 22c:	10 92 78 01 	sts	0x0178, r1
			rec[0] = 0;
 230:	10 92 1f 01 	sts	0x011F, r1
 234:	10 92 1e 01 	sts	0x011E, r1
			rec[1] = 0;
 238:	10 92 21 01 	sts	0x0121, r1
 23c:	10 92 20 01 	sts	0x0120, r1
			rec[2] = 0;
 240:	10 92 23 01 	sts	0x0123, r1
 244:	10 92 22 01 	sts	0x0122, r1
			rec[3] = 0;
 248:	10 92 25 01 	sts	0x0125, r1
 24c:	10 92 24 01 	sts	0x0124, r1
			rec[4] = 0;
 250:	10 92 27 01 	sts	0x0127, r1
 254:	10 92 26 01 	sts	0x0126, r1
 258:	ed c0       	rjmp	.+474    	; 0x434 <__vector_18+0x38e>
		
		}else if (rec[0] == 101) //cancelar todo el proceso
 25a:	65 36       	cpi	r22, 0x65	; 101
 25c:	71 05       	cpc	r23, r1
 25e:	19 f5       	brne	.+70     	; 0x2a6 <__vector_18+0x200>
		{
			TIMSK0 &= ~(1<<OCIE0A); //se desactivan las interrupciones que controlan los procesos de control de velocidad y de temperatura
 260:	ee e6       	ldi	r30, 0x6E	; 110
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	8d 7f       	andi	r24, 0xFD	; 253
 268:	80 83       	st	Z, r24
			TIMSK2 &= ~(1<<TOIE2);
 26a:	e0 e7       	ldi	r30, 0x70	; 112
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 81       	ld	r24, Z
 270:	8e 7f       	andi	r24, 0xFE	; 254
 272:	80 83       	st	Z, r24
			k=0;
 274:	10 92 79 01 	sts	0x0179, r1
 278:	10 92 78 01 	sts	0x0178, r1
			rec[0] = 0;
 27c:	10 92 1f 01 	sts	0x011F, r1
 280:	10 92 1e 01 	sts	0x011E, r1
			rec[1] = 0;
 284:	10 92 21 01 	sts	0x0121, r1
 288:	10 92 20 01 	sts	0x0120, r1
			rec[2] = 0;
 28c:	10 92 23 01 	sts	0x0123, r1
 290:	10 92 22 01 	sts	0x0122, r1
			rec[3] = 0;
 294:	10 92 25 01 	sts	0x0125, r1
 298:	10 92 24 01 	sts	0x0124, r1
			rec[4] = 0;
 29c:	10 92 27 01 	sts	0x0127, r1
 2a0:	10 92 26 01 	sts	0x0126, r1
 2a4:	c7 c0       	rjmp	.+398    	; 0x434 <__vector_18+0x38e>
		}else if (rec[0] == 99) //cambio de velocidad
 2a6:	63 36       	cpi	r22, 0x63	; 99
 2a8:	71 05       	cpc	r23, r1
 2aa:	09 f0       	breq	.+2      	; 0x2ae <__vector_18+0x208>
 2ac:	47 c0       	rjmp	.+142    	; 0x33c <__vector_18+0x296>
		{
			int vel = rec1[2]*100+rec1[3]*10+rec1[4];
 2ae:	40 91 9c 01 	lds	r20, 0x019C
 2b2:	50 91 9d 01 	lds	r21, 0x019D
 2b6:	24 e6       	ldi	r18, 0x64	; 100
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	42 9f       	mul	r20, r18
 2bc:	c0 01       	movw	r24, r0
 2be:	43 9f       	mul	r20, r19
 2c0:	90 0d       	add	r25, r0
 2c2:	52 9f       	mul	r21, r18
 2c4:	90 0d       	add	r25, r0
 2c6:	11 24       	eor	r1, r1
 2c8:	20 91 9e 01 	lds	r18, 0x019E
 2cc:	30 91 9f 01 	lds	r19, 0x019F
 2d0:	22 0f       	add	r18, r18
 2d2:	33 1f       	adc	r19, r19
 2d4:	a9 01       	movw	r20, r18
 2d6:	44 0f       	add	r20, r20
 2d8:	55 1f       	adc	r21, r21
 2da:	44 0f       	add	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	24 0f       	add	r18, r20
 2e0:	35 1f       	adc	r19, r21
 2e2:	82 0f       	add	r24, r18
 2e4:	93 1f       	adc	r25, r19
 2e6:	40 91 a0 01 	lds	r20, 0x01A0
 2ea:	50 91 a1 01 	lds	r21, 0x01A1
 2ee:	84 0f       	add	r24, r20
 2f0:	95 1f       	adc	r25, r21
			fp[0] = vel*512;
 2f2:	88 0f       	add	r24, r24
 2f4:	10 92 06 01 	sts	0x0106, r1
 2f8:	80 93 07 01 	sts	0x0107, r24
			p=1; //se llama a la rutina de cambio de velocidad
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	90 93 05 01 	sts	0x0105, r25
 304:	80 93 04 01 	sts	0x0104, r24
			PORTB &= ~(1<<LED);
 308:	28 98       	cbi	0x05, 0	; 5
			k=0;
 30a:	10 92 79 01 	sts	0x0179, r1
 30e:	10 92 78 01 	sts	0x0178, r1
			rec[0] = 0;
 312:	10 92 1f 01 	sts	0x011F, r1
 316:	10 92 1e 01 	sts	0x011E, r1
			rec[1] = 0;
 31a:	10 92 21 01 	sts	0x0121, r1
 31e:	10 92 20 01 	sts	0x0120, r1
			rec[2] = 0;
 322:	10 92 23 01 	sts	0x0123, r1
 326:	10 92 22 01 	sts	0x0122, r1
			rec[3] = 0;
 32a:	10 92 25 01 	sts	0x0125, r1
 32e:	10 92 24 01 	sts	0x0124, r1
			rec[4] = 0;
 332:	10 92 27 01 	sts	0x0127, r1
 336:	10 92 26 01 	sts	0x0126, r1
 33a:	7c c0       	rjmp	.+248    	; 0x434 <__vector_18+0x38e>
			
		}else if (rec[0] == 97) //activar motor
 33c:	61 36       	cpi	r22, 0x61	; 97
 33e:	71 05       	cpc	r23, r1
 340:	09 f0       	breq	.+2      	; 0x344 <__vector_18+0x29e>
 342:	4c c0       	rjmp	.+152    	; 0x3dc <__vector_18+0x336>
		{
			int vel = rec1[2]*100+rec1[3]*10+rec1[4];
 344:	40 91 9c 01 	lds	r20, 0x019C
 348:	50 91 9d 01 	lds	r21, 0x019D
 34c:	24 e6       	ldi	r18, 0x64	; 100
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	42 9f       	mul	r20, r18
 352:	c0 01       	movw	r24, r0
 354:	43 9f       	mul	r20, r19
 356:	90 0d       	add	r25, r0
 358:	52 9f       	mul	r21, r18
 35a:	90 0d       	add	r25, r0
 35c:	11 24       	eor	r1, r1
 35e:	20 91 9e 01 	lds	r18, 0x019E
 362:	30 91 9f 01 	lds	r19, 0x019F
 366:	22 0f       	add	r18, r18
 368:	33 1f       	adc	r19, r19
 36a:	a9 01       	movw	r20, r18
 36c:	44 0f       	add	r20, r20
 36e:	55 1f       	adc	r21, r21
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	24 0f       	add	r18, r20
 376:	35 1f       	adc	r19, r21
 378:	82 0f       	add	r24, r18
 37a:	93 1f       	adc	r25, r19
 37c:	40 91 a0 01 	lds	r20, 0x01A0
 380:	50 91 a1 01 	lds	r21, 0x01A1
 384:	84 0f       	add	r24, r20
 386:	95 1f       	adc	r25, r21
			fp[0] = vel*512; //se realiza el ajuste de la frecuencia requerida de acuerdo a la velocidad que el usuario ingresa
 388:	88 0f       	add	r24, r24
 38a:	10 92 06 01 	sts	0x0106, r1
 38e:	80 93 07 01 	sts	0x0107, r24
			h=1;//se enciende el proceso de rranque de motor y de cambio de velocidad
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	90 93 01 01 	sts	0x0101, r25
 39a:	80 93 00 01 	sts	0x0100, r24
			p=1;//se llama a la rutina de cambio de velocidad del motor
 39e:	90 93 05 01 	sts	0x0105, r25
 3a2:	80 93 04 01 	sts	0x0104, r24
			k=0;
 3a6:	10 92 79 01 	sts	0x0179, r1
 3aa:	10 92 78 01 	sts	0x0178, r1
			DDRB |= (1<<PULSE); //se activa la salida del pulso
 3ae:	21 9a       	sbi	0x04, 1	; 4
		    PORTB &= ~(1<<LED);
 3b0:	28 98       	cbi	0x05, 0	; 5
			rec[0] = 0;
 3b2:	10 92 1f 01 	sts	0x011F, r1
 3b6:	10 92 1e 01 	sts	0x011E, r1
			rec[1] = 0;
 3ba:	10 92 21 01 	sts	0x0121, r1
 3be:	10 92 20 01 	sts	0x0120, r1
			rec[2] = 0;
 3c2:	10 92 23 01 	sts	0x0123, r1
 3c6:	10 92 22 01 	sts	0x0122, r1
			rec[3] = 0;
 3ca:	10 92 25 01 	sts	0x0125, r1
 3ce:	10 92 24 01 	sts	0x0124, r1
			rec[4] = 0;
 3d2:	10 92 27 01 	sts	0x0127, r1
 3d6:	10 92 26 01 	sts	0x0126, r1
 3da:	2c c0       	rjmp	.+88     	; 0x434 <__vector_18+0x38e>
		}
		else if (rec[0] == 100) //desactivar motor
 3dc:	64 36       	cpi	r22, 0x64	; 100
 3de:	71 05       	cpc	r23, r1
 3e0:	51 f4       	brne	.+20     	; 0x3f6 <__vector_18+0x350>
		{
			h=0; //se manda a la rutina para el frenado
 3e2:	10 92 01 01 	sts	0x0101, r1
 3e6:	10 92 00 01 	sts	0x0100, r1
			k=0;
 3ea:	10 92 79 01 	sts	0x0179, r1
 3ee:	10 92 78 01 	sts	0x0178, r1
			PORTB &= ~(1<<LED);
 3f2:	28 98       	cbi	0x05, 0	; 5
 3f4:	1f c0       	rjmp	.+62     	; 0x434 <__vector_18+0x38e>
		}
		else
		{
			k=0;
 3f6:	10 92 79 01 	sts	0x0179, r1
 3fa:	10 92 78 01 	sts	0x0178, r1
			rec[0] = 0;
 3fe:	10 92 1f 01 	sts	0x011F, r1
 402:	10 92 1e 01 	sts	0x011E, r1
			rec[1] = 0;
 406:	10 92 21 01 	sts	0x0121, r1
 40a:	10 92 20 01 	sts	0x0120, r1
			rec[2] = 0;
 40e:	10 92 23 01 	sts	0x0123, r1
 412:	10 92 22 01 	sts	0x0122, r1
			rec[3] = 0;
 416:	10 92 25 01 	sts	0x0125, r1
 41a:	10 92 24 01 	sts	0x0124, r1
			rec[4] = 0;
 41e:	10 92 27 01 	sts	0x0127, r1
 422:	10 92 26 01 	sts	0x0126, r1
 426:	06 c0       	rjmp	.+12     	; 0x434 <__vector_18+0x38e>
		}			
		
	}else
	{
		k++;
 428:	2f 5f       	subi	r18, 0xFF	; 255
 42a:	3f 4f       	sbci	r19, 0xFF	; 255
 42c:	30 93 79 01 	sts	0x0179, r19
 430:	20 93 78 01 	sts	0x0178, r18
	}		
		
}
 434:	ff 91       	pop	r31
 436:	ef 91       	pop	r30
 438:	9f 91       	pop	r25
 43a:	8f 91       	pop	r24
 43c:	7f 91       	pop	r23
 43e:	6f 91       	pop	r22
 440:	5f 91       	pop	r21
 442:	4f 91       	pop	r20
 444:	3f 91       	pop	r19
 446:	2f 91       	pop	r18
 448:	0f 90       	pop	r0
 44a:	0f be       	out	0x3f, r0	; 63
 44c:	0f 90       	pop	r0
 44e:	1f 90       	pop	r1
 450:	18 95       	reti

00000452 <__vector_21>:

int val1 = 0, val2 = 0;
int n1 = 0;
ISR(ADC_vect)
{
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	2f 93       	push	r18
 462:	3f 93       	push	r19
 464:	4f 93       	push	r20
 466:	5f 93       	push	r21
 468:	6f 93       	push	r22
 46a:	7f 93       	push	r23
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	af 93       	push	r26
 472:	bf 93       	push	r27
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	ef 93       	push	r30
 47a:	ff 93       	push	r31
	
	val1 = ADCL;
 47c:	a0 91 78 00 	lds	r26, 0x0078
 480:	b0 e0       	ldi	r27, 0x00	; 0
 482:	b0 93 31 01 	sts	0x0131, r27
 486:	a0 93 30 01 	sts	0x0130, r26
	val2 = ADCH;
 48a:	20 91 79 00 	lds	r18, 0x0079
 48e:	20 93 2e 01 	sts	0x012E, r18
 492:	10 92 2f 01 	sts	0x012F, r1
	
	temp[1][n] = pos; //se les asigna un lugar a los datos leídos
 496:	00 91 7a 01 	lds	r16, 0x017A
 49a:	10 91 7b 01 	lds	r17, 0x017B
 49e:	f8 01       	movw	r30, r16
 4a0:	35 96       	adiw	r30, 0x05	; 5
 4a2:	44 e8       	ldi	r20, 0x84	; 132
 4a4:	51 e0       	ldi	r21, 0x01	; 1
 4a6:	ee 0f       	add	r30, r30
 4a8:	ff 1f       	adc	r31, r31
 4aa:	e4 0f       	add	r30, r20
 4ac:	f5 1f       	adc	r31, r21
 4ae:	80 91 18 01 	lds	r24, 0x0118
 4b2:	90 91 19 01 	lds	r25, 0x0119
 4b6:	91 83       	std	Z+1, r25	; 0x01
 4b8:	80 83       	st	Z, r24
	temp[2][n] = ((val2<<8|val1)+87.434)/4.5505;
 4ba:	e8 01       	movw	r28, r16
 4bc:	2a 96       	adiw	r28, 0x0a	; 10
 4be:	cc 0f       	add	r28, r28
 4c0:	dd 1f       	adc	r29, r29
 4c2:	c4 0f       	add	r28, r20
 4c4:	d5 1f       	adc	r29, r21
 4c6:	72 2f       	mov	r23, r18
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	a6 2b       	or	r26, r22
 4cc:	b7 2b       	or	r27, r23
 4ce:	bd 01       	movw	r22, r26
 4d0:	88 27       	eor	r24, r24
 4d2:	77 fd       	sbrc	r23, 7
 4d4:	80 95       	com	r24
 4d6:	98 2f       	mov	r25, r24
 4d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <__floatsisf>
 4dc:	25 e3       	ldi	r18, 0x35	; 53
 4de:	3e ed       	ldi	r19, 0xDE	; 222
 4e0:	4e ea       	ldi	r20, 0xAE	; 174
 4e2:	52 e4       	ldi	r21, 0x42	; 66
 4e4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__addsf3>
 4e8:	22 eb       	ldi	r18, 0xB2	; 178
 4ea:	3d e9       	ldi	r19, 0x9D	; 157
 4ec:	41 e9       	ldi	r20, 0x91	; 145
 4ee:	50 e4       	ldi	r21, 0x40	; 64
 4f0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <__divsf3>
 4f4:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixsfsi>
 4f8:	dc 01       	movw	r26, r24
 4fa:	cb 01       	movw	r24, r22
 4fc:	99 83       	std	Y+1, r25	; 0x01
 4fe:	88 83       	st	Y, r24
		
	n++;
 500:	0f 5f       	subi	r16, 0xFF	; 255
 502:	1f 4f       	sbci	r17, 0xFF	; 255
 504:	10 93 7b 01 	sts	0x017B, r17
 508:	00 93 7a 01 	sts	0x017A, r16
	if (n>3)
 50c:	04 30       	cpi	r16, 0x04	; 4
 50e:	11 05       	cpc	r17, r1
 510:	24 f0       	brlt	.+8      	; 0x51a <__vector_21+0xc8>
	{
		n=0;
 512:	10 92 7b 01 	sts	0x017B, r1
 516:	10 92 7a 01 	sts	0x017A, r1
	}
	ADMUX &= 0xE0; //se realiza la multiplexión de los puertos de ADC
 51a:	ec e7       	ldi	r30, 0x7C	; 124
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	80 7e       	andi	r24, 0xE0	; 224
 522:	80 83       	st	Z, r24
	ADMUX |= n;
 524:	90 81       	ld	r25, Z
 526:	80 91 7a 01 	lds	r24, 0x017A
 52a:	89 2b       	or	r24, r25
 52c:	80 83       	st	Z, r24
}
 52e:	ff 91       	pop	r31
 530:	ef 91       	pop	r30
 532:	df 91       	pop	r29
 534:	cf 91       	pop	r28
 536:	bf 91       	pop	r27
 538:	af 91       	pop	r26
 53a:	9f 91       	pop	r25
 53c:	8f 91       	pop	r24
 53e:	7f 91       	pop	r23
 540:	6f 91       	pop	r22
 542:	5f 91       	pop	r21
 544:	4f 91       	pop	r20
 546:	3f 91       	pop	r19
 548:	2f 91       	pop	r18
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_9>:

ISR(TIMER2_OVF_vect)
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	8f 93       	push	r24
 564:	9f 93       	push	r25
 566:	ef 93       	push	r30
 568:	ff 93       	push	r31
	
	TCNT2 = -234; //tiempo de 30ms
 56a:	86 e1       	ldi	r24, 0x16	; 22
 56c:	80 93 b2 00 	sts	0x00B2, r24
	
	switch(i)
 570:	80 91 7e 01 	lds	r24, 0x017E
 574:	90 91 7f 01 	lds	r25, 0x017F
 578:	82 30       	cpi	r24, 0x02	; 2
 57a:	91 05       	cpc	r25, r1
 57c:	09 f4       	brne	.+2      	; 0x580 <__vector_9+0x28>
 57e:	40 c0       	rjmp	.+128    	; 0x600 <__vector_9+0xa8>
 580:	83 30       	cpi	r24, 0x03	; 3
 582:	91 05       	cpc	r25, r1
 584:	3c f4       	brge	.+14     	; 0x594 <__vector_9+0x3c>
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	89 f0       	breq	.+34     	; 0x5ac <__vector_9+0x54>
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	91 05       	cpc	r25, r1
 58e:	09 f0       	breq	.+2      	; 0x592 <__vector_9+0x3a>
 590:	8b c0       	rjmp	.+278    	; 0x6a8 <__vector_9+0x150>
 592:	1e c0       	rjmp	.+60     	; 0x5d0 <__vector_9+0x78>
 594:	84 30       	cpi	r24, 0x04	; 4
 596:	91 05       	cpc	r25, r1
 598:	09 f4       	brne	.+2      	; 0x59c <__vector_9+0x44>
 59a:	4f c0       	rjmp	.+158    	; 0x63a <__vector_9+0xe2>
 59c:	84 30       	cpi	r24, 0x04	; 4
 59e:	91 05       	cpc	r25, r1
 5a0:	cc f1       	brlt	.+114    	; 0x614 <__vector_9+0xbc>
 5a2:	85 30       	cpi	r24, 0x05	; 5
 5a4:	91 05       	cpc	r25, r1
 5a6:	09 f0       	breq	.+2      	; 0x5aa <__vector_9+0x52>
 5a8:	7f c0       	rjmp	.+254    	; 0x6a8 <__vector_9+0x150>
 5aa:	5f c0       	rjmp	.+190    	; 0x66a <__vector_9+0x112>
	{
		case 0:
		UDR0 = temp[1][n]; //se envía el identificador del sensor de temperatura (1,2,3 o 4)
 5ac:	e0 91 7a 01 	lds	r30, 0x017A
 5b0:	f0 91 7b 01 	lds	r31, 0x017B
 5b4:	ee 0f       	add	r30, r30
 5b6:	ff 1f       	adc	r31, r31
 5b8:	e2 57       	subi	r30, 0x72	; 114
 5ba:	fe 4f       	sbci	r31, 0xFE	; 254
 5bc:	80 81       	ld	r24, Z
 5be:	80 93 c6 00 	sts	0x00C6, r24
		i=1;
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	90 93 7f 01 	sts	0x017F, r25
 5ca:	80 93 7e 01 	sts	0x017E, r24
		break;
 5ce:	73 c0       	rjmp	.+230    	; 0x6b6 <__vector_9+0x15e>
		case 1:
		UDR0 =  temp[2][n] / 2; //se envía el valor que se lee divido entre dos por cuestiones de comunicación, la interfaz realizará el ajuste
 5d0:	e0 91 7a 01 	lds	r30, 0x017A
 5d4:	f0 91 7b 01 	lds	r31, 0x017B
 5d8:	ee 0f       	add	r30, r30
 5da:	ff 1f       	adc	r31, r31
 5dc:	e8 56       	subi	r30, 0x68	; 104
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	80 81       	ld	r24, Z
 5e2:	91 81       	ldd	r25, Z+1	; 0x01
 5e4:	99 23       	and	r25, r25
 5e6:	0c f4       	brge	.+2      	; 0x5ea <__vector_9+0x92>
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	95 95       	asr	r25
 5ec:	87 95       	ror	r24
 5ee:	80 93 c6 00 	sts	0x00C6, r24
		i=2;
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	90 93 7f 01 	sts	0x017F, r25
 5fa:	80 93 7e 01 	sts	0x017E, r24
		break;
 5fe:	5b c0       	rjmp	.+182    	; 0x6b6 <__vector_9+0x15e>
		case 2:
		UDR0 = 44;
 600:	8c e2       	ldi	r24, 0x2C	; 44
 602:	80 93 c6 00 	sts	0x00C6, r24
		i=3;
 606:	83 e0       	ldi	r24, 0x03	; 3
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	90 93 7f 01 	sts	0x017F, r25
 60e:	80 93 7e 01 	sts	0x017E, r24
		break;
 612:	51 c0       	rjmp	.+162    	; 0x6b6 <__vector_9+0x15e>
		case 3:
		UDR0  = temp[1][n] + 4; // se envía el dato que el micro recibe de la interfaz, para corroborar que el dato se haya guardado, la posición 
 614:	e0 91 7a 01 	lds	r30, 0x017A
 618:	f0 91 7b 01 	lds	r31, 0x017B
 61c:	ee 0f       	add	r30, r30
 61e:	ff 1f       	adc	r31, r31
 620:	e2 57       	subi	r30, 0x72	; 114
 622:	fe 4f       	sbci	r31, 0xFE	; 254
 624:	80 81       	ld	r24, Z
 626:	8c 5f       	subi	r24, 0xFC	; 252
 628:	80 93 c6 00 	sts	0x00C6, r24
		i=4;
 62c:	84 e0       	ldi	r24, 0x04	; 4
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	90 93 7f 01 	sts	0x017F, r25
 634:	80 93 7e 01 	sts	0x017E, r24
		break;
 638:	3e c0       	rjmp	.+124    	; 0x6b6 <__vector_9+0x15e>
		case 4:
		UDR0 = tempc[n] / 2; // y el dato de temperatura que se desea
 63a:	e0 91 7a 01 	lds	r30, 0x017A
 63e:	f0 91 7b 01 	lds	r31, 0x017B
 642:	ee 0f       	add	r30, r30
 644:	ff 1f       	adc	r31, r31
 646:	e0 59       	subi	r30, 0x90	; 144
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	80 81       	ld	r24, Z
 64c:	91 81       	ldd	r25, Z+1	; 0x01
 64e:	99 23       	and	r25, r25
 650:	0c f4       	brge	.+2      	; 0x654 <__vector_9+0xfc>
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	95 95       	asr	r25
 656:	87 95       	ror	r24
 658:	80 93 c6 00 	sts	0x00C6, r24
		i=5;
 65c:	85 e0       	ldi	r24, 0x05	; 5
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	90 93 7f 01 	sts	0x017F, r25
 664:	80 93 7e 01 	sts	0x017E, r24
		break;
 668:	26 c0       	rjmp	.+76     	; 0x6b6 <__vector_9+0x15e>
		case 5:
		UDR0 = 44;
 66a:	8c e2       	ldi	r24, 0x2C	; 44
 66c:	80 93 c6 00 	sts	0x00C6, r24
		i=0;
 670:	10 92 7f 01 	sts	0x017F, r1
 674:	10 92 7e 01 	sts	0x017E, r1
		pos++;
 678:	80 91 18 01 	lds	r24, 0x0118
 67c:	90 91 19 01 	lds	r25, 0x0119
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	90 93 19 01 	sts	0x0119, r25
 686:	80 93 18 01 	sts	0x0118, r24
		if (pos>4)
 68a:	85 30       	cpi	r24, 0x05	; 5
 68c:	91 05       	cpc	r25, r1
 68e:	34 f0       	brlt	.+12     	; 0x69c <__vector_9+0x144>
		{
			pos = 1; 
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	90 93 19 01 	sts	0x0119, r25
 698:	80 93 18 01 	sts	0x0118, r24
		}
		ADCSRA |= (1<<ADSC); //se pide la siguiente lectura de los ADC
 69c:	ea e7       	ldi	r30, 0x7A	; 122
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	80 64       	ori	r24, 0x40	; 64
 6a4:	80 83       	st	Z, r24
		break;
 6a6:	07 c0       	rjmp	.+14     	; 0x6b6 <__vector_9+0x15e>
		default:
		UDR0 = 0X2C;
 6a8:	8c e2       	ldi	r24, 0x2C	; 44
 6aa:	80 93 c6 00 	sts	0x00C6, r24
		i = 0;
 6ae:	10 92 7f 01 	sts	0x017F, r1
 6b2:	10 92 7e 01 	sts	0x017E, r1
		break;
	}	
}
 6b6:	ff 91       	pop	r31
 6b8:	ef 91       	pop	r30
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	0f 90       	pop	r0
 6c0:	0f be       	out	0x3f, r0	; 63
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <__vector_14>:

int c = 0;
ISR(TIMER0_COMPA_vect)
{
 6c8:	1f 92       	push	r1
 6ca:	0f 92       	push	r0
 6cc:	0f b6       	in	r0, 0x3f	; 63
 6ce:	0f 92       	push	r0
 6d0:	11 24       	eor	r1, r1
 6d2:	2f 93       	push	r18
 6d4:	3f 93       	push	r19
 6d6:	8f 93       	push	r24
 6d8:	9f 93       	push	r25
	//PORTD ^= (1<<PORTD7);
	c++;
 6da:	80 91 2a 01 	lds	r24, 0x012A
 6de:	90 91 2b 01 	lds	r25, 0x012B
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	90 93 2b 01 	sts	0x012B, r25
 6e8:	80 93 2a 01 	sts	0x012A, r24
	/////////////////////////////////////control de temperatura 1
	if (tempc[0] > temp[2][0])//sólo si el error es distinto de cero se activa el pulso para el disparo de angulo de fase
 6ec:	20 91 70 01 	lds	r18, 0x0170
 6f0:	30 91 71 01 	lds	r19, 0x0171
 6f4:	80 91 98 01 	lds	r24, 0x0198
 6f8:	90 91 99 01 	lds	r25, 0x0199
 6fc:	82 17       	cp	r24, r18
 6fe:	93 07       	cpc	r25, r19
 700:	14 f4       	brge	.+4      	; 0x706 <__vector_14+0x3e>
	{
		PORTB |= (1<<PORTB4);
 702:	2c 9a       	sbi	0x05, 4	; 5
 704:	01 c0       	rjmp	.+2      	; 0x708 <__vector_14+0x40>
	}else
	{
		PORTB &= ~(1<<PORTB4);
 706:	2c 98       	cbi	0x05, 4	; 5
	}
	//
	///////////////////////////////////////control de temperatura 2
	//
	if (tempc[1]>temp[2][1])//sólo si el error es distointo de cero se activa el pulso para el disparo de angulo de fase
 708:	20 91 72 01 	lds	r18, 0x0172
 70c:	30 91 73 01 	lds	r19, 0x0173
 710:	80 91 9a 01 	lds	r24, 0x019A
 714:	90 91 9b 01 	lds	r25, 0x019B
 718:	82 17       	cp	r24, r18
 71a:	93 07       	cpc	r25, r19
 71c:	14 f4       	brge	.+4      	; 0x722 <__vector_14+0x5a>
	{
		PORTB |= (1<<PORTB5);	
 71e:	2d 9a       	sbi	0x05, 5	; 5
 720:	01 c0       	rjmp	.+2      	; 0x724 <__vector_14+0x5c>
	}else
	{
		PORTB &= ~(1<<PORTB5);
 722:	2d 98       	cbi	0x05, 5	; 5
	}
	//
	/////////////////////////////////////////control de temperatura 3
	//
	if (tempc[2]>temp[2][2])//sólo si el error es distointo de cero se activa el pulso para el disparo de angulo de fase
 724:	20 91 74 01 	lds	r18, 0x0174
 728:	30 91 75 01 	lds	r19, 0x0175
 72c:	80 91 9c 01 	lds	r24, 0x019C
 730:	90 91 9d 01 	lds	r25, 0x019D
 734:	82 17       	cp	r24, r18
 736:	93 07       	cpc	r25, r19
 738:	14 f4       	brge	.+4      	; 0x73e <__vector_14+0x76>
	{
		PORTB |= (1<<PORTB6);
 73a:	2e 9a       	sbi	0x05, 6	; 5
 73c:	01 c0       	rjmp	.+2      	; 0x740 <__vector_14+0x78>
	}else
	{
		PORTB &= ~(1<<PORTB6);
 73e:	2e 98       	cbi	0x05, 6	; 5
	}
	//
	//
	///////////////////////////////////////////control de temperatura 4/////////////////////////////
	//
	if (tempc[3]>temp[2][3]) //sólo si el error es distinto de cero se activa el pulso para el disparo de angulo de fase
 740:	20 91 76 01 	lds	r18, 0x0176
 744:	30 91 77 01 	lds	r19, 0x0177
 748:	80 91 9e 01 	lds	r24, 0x019E
 74c:	90 91 9f 01 	lds	r25, 0x019F
 750:	82 17       	cp	r24, r18
 752:	93 07       	cpc	r25, r19
 754:	14 f4       	brge	.+4      	; 0x75a <__vector_14+0x92>
	{
		PORTB |= (1<<PORTB7);
 756:	2f 9a       	sbi	0x05, 7	; 5
 758:	01 c0       	rjmp	.+2      	; 0x75c <__vector_14+0x94>
	}else
	{
		PORTB &= ~(1<<PORTB7);
 75a:	2f 98       	cbi	0x05, 7	; 5
	}
		
	/////////////////////////////////////////////CONTROL DE MOTOR////////////////////////////////////////////////////
	//
	if(c>22)
 75c:	80 91 2a 01 	lds	r24, 0x012A
 760:	90 91 2b 01 	lds	r25, 0x012B
 764:	87 31       	cpi	r24, 0x17	; 23
 766:	91 05       	cpc	r25, r1
 768:	0c f4       	brge	.+2      	; 0x76c <__vector_14+0xa4>
 76a:	90 c0       	rjmp	.+288    	; 0x88c <__vector_14+0x1c4>
	{
		////
		if (h == 1)
 76c:	80 91 00 01 	lds	r24, 0x0100
 770:	90 91 01 01 	lds	r25, 0x0101
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	91 05       	cpc	r25, r1
 778:	09 f0       	breq	.+2      	; 0x77c <__vector_14+0xb4>
 77a:	6b c0       	rjmp	.+214    	; 0x852 <__vector_14+0x18a>
		{
			PORTB &= ~(1<<EN);
 77c:	2a 98       	cbi	0x05, 2	; 5
			switch(p)
 77e:	80 91 04 01 	lds	r24, 0x0104
 782:	90 91 05 01 	lds	r25, 0x0105
 786:	82 30       	cpi	r24, 0x02	; 2
 788:	91 05       	cpc	r25, r1
 78a:	19 f1       	breq	.+70     	; 0x7d2 <__vector_14+0x10a>
 78c:	83 30       	cpi	r24, 0x03	; 3
 78e:	91 05       	cpc	r25, r1
 790:	e1 f1       	breq	.+120    	; 0x80a <__vector_14+0x142>
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	91 05       	cpc	r25, r1
 796:	09 f0       	breq	.+2      	; 0x79a <__vector_14+0xd2>
 798:	53 c0       	rjmp	.+166    	; 0x840 <__vector_14+0x178>
			{
				case 1:
				if (fp[0]>fp[1])
 79a:	20 91 06 01 	lds	r18, 0x0106
 79e:	30 91 07 01 	lds	r19, 0x0107
 7a2:	80 91 08 01 	lds	r24, 0x0108
 7a6:	90 91 09 01 	lds	r25, 0x0109
 7aa:	82 17       	cp	r24, r18
 7ac:	93 07       	cpc	r25, r19
 7ae:	3c f4       	brge	.+14     	; 0x7be <__vector_14+0xf6>
				{
					p = 2;
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	90 93 05 01 	sts	0x0105, r25
 7b8:	80 93 04 01 	sts	0x0104, r24
 7bc:	41 c0       	rjmp	.+130    	; 0x840 <__vector_14+0x178>
				}else if (fp[0]<fp[1])
 7be:	28 17       	cp	r18, r24
 7c0:	39 07       	cpc	r19, r25
 7c2:	f4 f5       	brge	.+124    	; 0x840 <__vector_14+0x178>
				{
					p = 3;
 7c4:	83 e0       	ldi	r24, 0x03	; 3
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	90 93 05 01 	sts	0x0105, r25
 7cc:	80 93 04 01 	sts	0x0104, r24
 7d0:	37 c0       	rjmp	.+110    	; 0x840 <__vector_14+0x178>
				}
					
				break;
					
				case 2: //frecuencia deseada es mayor que la frecuencia actual
				fp[1] = fp[1]+1;
 7d2:	80 91 08 01 	lds	r24, 0x0108
 7d6:	90 91 09 01 	lds	r25, 0x0109
 7da:	01 96       	adiw	r24, 0x01	; 1
 7dc:	90 93 09 01 	sts	0x0109, r25
 7e0:	80 93 08 01 	sts	0x0108, r24
				if (fp[1] >= fp[0])
 7e4:	20 91 06 01 	lds	r18, 0x0106
 7e8:	30 91 07 01 	lds	r19, 0x0107
 7ec:	82 17       	cp	r24, r18
 7ee:	93 07       	cpc	r25, r19
 7f0:	3c f1       	brlt	.+78     	; 0x840 <__vector_14+0x178>
				{
					p=-1;
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	9f ef       	ldi	r25, 0xFF	; 255
 7f6:	90 93 05 01 	sts	0x0105, r25
 7fa:	80 93 04 01 	sts	0x0104, r24
					fp[1] = fp[0];
 7fe:	30 93 09 01 	sts	0x0109, r19
 802:	20 93 08 01 	sts	0x0108, r18
					PORTB |= (1<<LED);
 806:	28 9a       	sbi	0x05, 0	; 5
 808:	1b c0       	rjmp	.+54     	; 0x840 <__vector_14+0x178>
						
				}
				break;
					
				case 3: //frecuencia deseada es menor que la frecuencia actual
				fp[1] = fp[1]-1;
 80a:	80 91 08 01 	lds	r24, 0x0108
 80e:	90 91 09 01 	lds	r25, 0x0109
 812:	01 97       	sbiw	r24, 0x01	; 1
 814:	90 93 09 01 	sts	0x0109, r25
 818:	80 93 08 01 	sts	0x0108, r24
				if (fp[1] <= fp[0])
 81c:	20 91 06 01 	lds	r18, 0x0106
 820:	30 91 07 01 	lds	r19, 0x0107
 824:	28 17       	cp	r18, r24
 826:	39 07       	cpc	r19, r25
 828:	5c f0       	brlt	.+22     	; 0x840 <__vector_14+0x178>
				{
					p=-1;
 82a:	8f ef       	ldi	r24, 0xFF	; 255
 82c:	9f ef       	ldi	r25, 0xFF	; 255
 82e:	90 93 05 01 	sts	0x0105, r25
 832:	80 93 04 01 	sts	0x0104, r24
					fp[1] = fp[0];
 836:	30 93 09 01 	sts	0x0109, r19
 83a:	20 93 08 01 	sts	0x0108, r18
					PORTB |= (1<<LED);
 83e:	28 9a       	sbi	0x05, 0	; 5
				default:
				fp[0] = fp[0];
				break;
					
			}
			OCR1A = TOP;
 840:	80 91 02 01 	lds	r24, 0x0102
 844:	90 91 03 01 	lds	r25, 0x0103
 848:	90 93 89 00 	sts	0x0089, r25
 84c:	80 93 88 00 	sts	0x0088, r24
 850:	19 c0       	rjmp	.+50     	; 0x884 <__vector_14+0x1bc>
		}else if (h == 0) //rutina de paro del stepper
 852:	00 97       	sbiw	r24, 0x00	; 0
 854:	b9 f4       	brne	.+46     	; 0x884 <__vector_14+0x1bc>
		{
			if (fp[1] > 0) //si la frecuencia actual es mayor que cero, comenzará a disminuir una unidad cada vez
 856:	80 91 08 01 	lds	r24, 0x0108
 85a:	90 91 09 01 	lds	r25, 0x0109
 85e:	18 16       	cp	r1, r24
 860:	19 06       	cpc	r1, r25
 862:	74 f4       	brge	.+28     	; 0x880 <__vector_14+0x1b8>
			{
				fp[1] = fp[1] - 1;
 864:	01 97       	sbiw	r24, 0x01	; 1
 866:	90 93 09 01 	sts	0x0109, r25
 86a:	80 93 08 01 	sts	0x0108, r24
				OCR1A = TOP; //se asigna el valor calculado del TOP al registro OCR1A para cambiar la frecuencia del pulso
 86e:	80 91 02 01 	lds	r24, 0x0102
 872:	90 91 03 01 	lds	r25, 0x0103
 876:	90 93 89 00 	sts	0x0089, r25
 87a:	80 93 88 00 	sts	0x0088, r24
 87e:	02 c0       	rjmp	.+4      	; 0x884 <__vector_14+0x1bc>
			}else
			{
				PORTB |= (1<<LED);
 880:	28 9a       	sbi	0x05, 0	; 5
				PORTB |= (1<<EN);
 882:	2a 9a       	sbi	0x05, 2	; 5
			}
		}
		c=0;
 884:	10 92 2b 01 	sts	0x012B, r1
 888:	10 92 2a 01 	sts	0x012A, r1
	}
		
}
 88c:	9f 91       	pop	r25
 88e:	8f 91       	pop	r24
 890:	3f 91       	pop	r19
 892:	2f 91       	pop	r18
 894:	0f 90       	pop	r0
 896:	0f be       	out	0x3f, r0	; 63
 898:	0f 90       	pop	r0
 89a:	1f 90       	pop	r1
 89c:	18 95       	reti

0000089e <__vector_1>:

ISR(INT0_vect)
{
 89e:	1f 92       	push	r1
 8a0:	0f 92       	push	r0
 8a2:	0f b6       	in	r0, 0x3f	; 63
 8a4:	0f 92       	push	r0
 8a6:	11 24       	eor	r1, r1
 8a8:	8f 93       	push	r24
 8aa:	9f 93       	push	r25
	///////////////////////cruce por cero 
	aux = 1;
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	90 93 3d 01 	sts	0x013D, r25
 8b4:	80 93 3c 01 	sts	0x013C, r24
}
 8b8:	9f 91       	pop	r25
 8ba:	8f 91       	pop	r24
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <main>:

int main(void)
{
	cli();
 8c6:	f8 94       	cli
	//configuracion puerto serial
	UCSR0B |= (1<<RXCIE0) | (1<<RXEN0) | (1<<TXEN0);//CONFIGURACION DE INTERRUPCIONES Y HABILITACION DE RECEPCION Y TRANSMISION
 8c8:	e1 ec       	ldi	r30, 0xC1	; 193
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	80 81       	ld	r24, Z
 8ce:	88 69       	ori	r24, 0x98	; 152
 8d0:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ02) ; //configuracion de 8 bits de trama, 1 bit de parada, asincrona
 8d2:	e2 ec       	ldi	r30, 0xC2	; 194
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	84 60       	ori	r24, 0x04	; 4
 8da:	80 83       	st	Z, r24
	UBRR0L = 52; //BAUDRATE DE 9600 a 8MHz
 8dc:	84 e3       	ldi	r24, 0x34	; 52
 8de:	80 93 c4 00 	sts	0x00C4, r24
	
	//configuracion Timer0
	TCCR0A |= (1<<WGM01); //CTC Mode
 8e2:	84 b5       	in	r24, 0x24	; 36
 8e4:	82 60       	ori	r24, 0x02	; 2
 8e6:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01) ; //preescaler de 8
 8e8:	85 b5       	in	r24, 0x25	; 37
 8ea:	82 60       	ori	r24, 0x02	; 2
 8ec:	85 bd       	out	0x25, r24	; 37
	OCR0A = 45; //100us
 8ee:	8d e2       	ldi	r24, 0x2D	; 45
 8f0:	87 bd       	out	0x27, r24	; 39
	
	//////configuracion de timer 1
	TCCR1A |= (1<<COM1A0) | (1<<WGM10) | (1<<WGM11) ; //Fast-PWM, OCR1A TOP, toggle
 8f2:	e0 e8       	ldi	r30, 0x80	; 128
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	83 64       	ori	r24, 0x43	; 67
 8fa:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12) | (1<<WGM13) | (1<<CS11); //prescaler de 8
 8fc:	e1 e8       	ldi	r30, 0x81	; 129
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	8a 61       	ori	r24, 0x1A	; 26
 904:	80 83       	st	Z, r24
	OCR1A = 100;
 906:	84 e6       	ldi	r24, 0x64	; 100
 908:	90 e0       	ldi	r25, 0x00	; 0
 90a:	90 93 89 00 	sts	0x0089, r25
 90e:	80 93 88 00 	sts	0x0088, r24
	
	//configuracion de ADC
	ADMUX |= (1<<REFS0) | (1<<REFS1); //se configura referencia de voltaje interna 1.1V y alineacion a la izquierda de los datos convertidos
 912:	ec e7       	ldi	r30, 0x7C	; 124
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	80 81       	ld	r24, Z
 918:	80 6c       	ori	r24, 0xC0	; 192
 91a:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN) | (1<<ADIE); //se habilita el ADC, se inicia la primer conversion, se habilita la interrupcion
 91c:	ea e7       	ldi	r30, 0x7A	; 122
 91e:	f0 e0       	ldi	r31, 0x00	; 0
 920:	80 81       	ld	r24, Z
 922:	88 68       	ori	r24, 0x88	; 136
 924:	80 83       	st	Z, r24
	
	//configuración Timer 2
	TCCR2B |= (1<<CS20) | (1<<CS21) | (1<<CS22); //Preescaler de 1024
 926:	e1 eb       	ldi	r30, 0xB1	; 177
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	87 60       	ori	r24, 0x07	; 7
 92e:	80 83       	st	Z, r24
	TCNT2 = -234; //tiempo de 30ms
 930:	86 e1       	ldi	r24, 0x16	; 22
 932:	80 93 b2 00 	sts	0x00B2, r24
	
	//configuracion interrupción externa
	EICRA |= (1<<ISC01); // activacion por flanco de bajada
 936:	e9 e6       	ldi	r30, 0x69	; 105
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	82 60       	ori	r24, 0x02	; 2
 93e:	80 83       	st	Z, r24
	EIMSK |= (1<<INT0); // enable de interrupcion externa en INT0
 940:	e8 9a       	sbi	0x1d, 0	; 29
	//
	sei();
 942:	78 94       	sei
	
	DDRB = 0XFD;//declaracion de puerto B como salida
 944:	8d ef       	ldi	r24, 0xFD	; 253
 946:	84 b9       	out	0x04, r24	; 4
	DDRD = 0XC2;//pines de TX y RX declarados como salida //CAMBIAR A 0Xc3
 948:	82 ec       	ldi	r24, 0xC2	; 194
 94a:	8a b9       	out	0x0a, r24	; 10
	PORTB |= (1<<EN);
 94c:	2a 9a       	sbi	0x05, 2	; 5
	PORTD |= (1<<ZERO);
 94e:	5a 9a       	sbi	0x0b, 2	; 11
	
    while(1)
    {	
		PORTB |= (1<<DIR);
		TOP = round(F_CPU/(8*fp[1]) - 1);
 950:	c8 e0       	ldi	r28, 0x08	; 8
 952:	d1 e0       	ldi	r29, 0x01	; 1
 954:	0f 2e       	mov	r0, r31
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	cf 2e       	mov	r12, r31
 95a:	f2 e1       	ldi	r31, 0x12	; 18
 95c:	df 2e       	mov	r13, r31
 95e:	fa e7       	ldi	r31, 0x7A	; 122
 960:	ef 2e       	mov	r14, r31
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	ff 2e       	mov	r15, r31
 966:	f0 2d       	mov	r31, r0
	PORTB |= (1<<EN);
	PORTD |= (1<<ZERO);
	
    while(1)
    {	
		PORTB |= (1<<DIR);
 968:	2b 9a       	sbi	0x05, 3	; 5
		TOP = round(F_CPU/(8*fp[1]) - 1);
 96a:	28 81       	ld	r18, Y
 96c:	39 81       	ldd	r19, Y+1	; 0x01
 96e:	22 0f       	add	r18, r18
 970:	33 1f       	adc	r19, r19
 972:	22 0f       	add	r18, r18
 974:	33 1f       	adc	r19, r19
 976:	22 0f       	add	r18, r18
 978:	33 1f       	adc	r19, r19
 97a:	44 27       	eor	r20, r20
 97c:	37 fd       	sbrc	r19, 7
 97e:	40 95       	com	r20
 980:	54 2f       	mov	r21, r20
 982:	c7 01       	movw	r24, r14
 984:	b6 01       	movw	r22, r12
 986:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__udivmodsi4>
 98a:	ca 01       	movw	r24, r20
 98c:	b9 01       	movw	r22, r18
 98e:	61 50       	subi	r22, 0x01	; 1
 990:	70 40       	sbci	r23, 0x00	; 0
 992:	80 40       	sbci	r24, 0x00	; 0
 994:	90 40       	sbci	r25, 0x00	; 0
 996:	0e 94 d6 05 	call	0xbac	; 0xbac <__floatunsisf>
 99a:	0e 94 64 06 	call	0xcc8	; 0xcc8 <round>
 99e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fixsfsi>
 9a2:	dc 01       	movw	r26, r24
 9a4:	cb 01       	movw	r24, r22
 9a6:	90 93 03 01 	sts	0x0103, r25
 9aa:	80 93 02 01 	sts	0x0102, r24
 9ae:	dc cf       	rjmp	.-72     	; 0x968 <__stack+0x69>

000009b0 <__subsf3>:
 9b0:	50 58       	subi	r21, 0x80	; 128

000009b2 <__addsf3>:
 9b2:	bb 27       	eor	r27, r27
 9b4:	aa 27       	eor	r26, r26
 9b6:	0e d0       	rcall	.+28     	; 0x9d4 <__addsf3x>
 9b8:	4d c1       	rjmp	.+666    	; 0xc54 <__fp_round>
 9ba:	3e d1       	rcall	.+636    	; 0xc38 <__fp_pscA>
 9bc:	30 f0       	brcs	.+12     	; 0x9ca <__addsf3+0x18>
 9be:	43 d1       	rcall	.+646    	; 0xc46 <__fp_pscB>
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__addsf3+0x18>
 9c2:	31 f4       	brne	.+12     	; 0x9d0 <__addsf3+0x1e>
 9c4:	9f 3f       	cpi	r25, 0xFF	; 255
 9c6:	11 f4       	brne	.+4      	; 0x9cc <__addsf3+0x1a>
 9c8:	1e f4       	brtc	.+6      	; 0x9d0 <__addsf3+0x1e>
 9ca:	33 c1       	rjmp	.+614    	; 0xc32 <__fp_nan>
 9cc:	0e f4       	brtc	.+2      	; 0x9d0 <__addsf3+0x1e>
 9ce:	e0 95       	com	r30
 9d0:	e7 fb       	bst	r30, 7
 9d2:	29 c1       	rjmp	.+594    	; 0xc26 <__fp_inf>

000009d4 <__addsf3x>:
 9d4:	e9 2f       	mov	r30, r25
 9d6:	4f d1       	rcall	.+670    	; 0xc76 <__fp_split3>
 9d8:	80 f3       	brcs	.-32     	; 0x9ba <__addsf3+0x8>
 9da:	ba 17       	cp	r27, r26
 9dc:	62 07       	cpc	r22, r18
 9de:	73 07       	cpc	r23, r19
 9e0:	84 07       	cpc	r24, r20
 9e2:	95 07       	cpc	r25, r21
 9e4:	18 f0       	brcs	.+6      	; 0x9ec <__addsf3x+0x18>
 9e6:	71 f4       	brne	.+28     	; 0xa04 <__addsf3x+0x30>
 9e8:	9e f5       	brtc	.+102    	; 0xa50 <__addsf3x+0x7c>
 9ea:	67 c1       	rjmp	.+718    	; 0xcba <__fp_zero>
 9ec:	0e f4       	brtc	.+2      	; 0x9f0 <__addsf3x+0x1c>
 9ee:	e0 95       	com	r30
 9f0:	0b 2e       	mov	r0, r27
 9f2:	ba 2f       	mov	r27, r26
 9f4:	a0 2d       	mov	r26, r0
 9f6:	0b 01       	movw	r0, r22
 9f8:	b9 01       	movw	r22, r18
 9fa:	90 01       	movw	r18, r0
 9fc:	0c 01       	movw	r0, r24
 9fe:	ca 01       	movw	r24, r20
 a00:	a0 01       	movw	r20, r0
 a02:	11 24       	eor	r1, r1
 a04:	ff 27       	eor	r31, r31
 a06:	59 1b       	sub	r21, r25
 a08:	99 f0       	breq	.+38     	; 0xa30 <__addsf3x+0x5c>
 a0a:	59 3f       	cpi	r21, 0xF9	; 249
 a0c:	50 f4       	brcc	.+20     	; 0xa22 <__addsf3x+0x4e>
 a0e:	50 3e       	cpi	r21, 0xE0	; 224
 a10:	68 f1       	brcs	.+90     	; 0xa6c <__addsf3x+0x98>
 a12:	1a 16       	cp	r1, r26
 a14:	f0 40       	sbci	r31, 0x00	; 0
 a16:	a2 2f       	mov	r26, r18
 a18:	23 2f       	mov	r18, r19
 a1a:	34 2f       	mov	r19, r20
 a1c:	44 27       	eor	r20, r20
 a1e:	58 5f       	subi	r21, 0xF8	; 248
 a20:	f3 cf       	rjmp	.-26     	; 0xa08 <__addsf3x+0x34>
 a22:	46 95       	lsr	r20
 a24:	37 95       	ror	r19
 a26:	27 95       	ror	r18
 a28:	a7 95       	ror	r26
 a2a:	f0 40       	sbci	r31, 0x00	; 0
 a2c:	53 95       	inc	r21
 a2e:	c9 f7       	brne	.-14     	; 0xa22 <__addsf3x+0x4e>
 a30:	7e f4       	brtc	.+30     	; 0xa50 <__addsf3x+0x7c>
 a32:	1f 16       	cp	r1, r31
 a34:	ba 0b       	sbc	r27, r26
 a36:	62 0b       	sbc	r22, r18
 a38:	73 0b       	sbc	r23, r19
 a3a:	84 0b       	sbc	r24, r20
 a3c:	ba f0       	brmi	.+46     	; 0xa6c <__addsf3x+0x98>
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	a1 f0       	breq	.+40     	; 0xa6a <__addsf3x+0x96>
 a42:	ff 0f       	add	r31, r31
 a44:	bb 1f       	adc	r27, r27
 a46:	66 1f       	adc	r22, r22
 a48:	77 1f       	adc	r23, r23
 a4a:	88 1f       	adc	r24, r24
 a4c:	c2 f7       	brpl	.-16     	; 0xa3e <__addsf3x+0x6a>
 a4e:	0e c0       	rjmp	.+28     	; 0xa6c <__addsf3x+0x98>
 a50:	ba 0f       	add	r27, r26
 a52:	62 1f       	adc	r22, r18
 a54:	73 1f       	adc	r23, r19
 a56:	84 1f       	adc	r24, r20
 a58:	48 f4       	brcc	.+18     	; 0xa6c <__addsf3x+0x98>
 a5a:	87 95       	ror	r24
 a5c:	77 95       	ror	r23
 a5e:	67 95       	ror	r22
 a60:	b7 95       	ror	r27
 a62:	f7 95       	ror	r31
 a64:	9e 3f       	cpi	r25, 0xFE	; 254
 a66:	08 f0       	brcs	.+2      	; 0xa6a <__addsf3x+0x96>
 a68:	b3 cf       	rjmp	.-154    	; 0x9d0 <__addsf3+0x1e>
 a6a:	93 95       	inc	r25
 a6c:	88 0f       	add	r24, r24
 a6e:	08 f0       	brcs	.+2      	; 0xa72 <__addsf3x+0x9e>
 a70:	99 27       	eor	r25, r25
 a72:	ee 0f       	add	r30, r30
 a74:	97 95       	ror	r25
 a76:	87 95       	ror	r24
 a78:	08 95       	ret

00000a7a <__divsf3>:
 a7a:	0c d0       	rcall	.+24     	; 0xa94 <__divsf3x>
 a7c:	eb c0       	rjmp	.+470    	; 0xc54 <__fp_round>
 a7e:	e3 d0       	rcall	.+454    	; 0xc46 <__fp_pscB>
 a80:	40 f0       	brcs	.+16     	; 0xa92 <__divsf3+0x18>
 a82:	da d0       	rcall	.+436    	; 0xc38 <__fp_pscA>
 a84:	30 f0       	brcs	.+12     	; 0xa92 <__divsf3+0x18>
 a86:	21 f4       	brne	.+8      	; 0xa90 <__divsf3+0x16>
 a88:	5f 3f       	cpi	r21, 0xFF	; 255
 a8a:	19 f0       	breq	.+6      	; 0xa92 <__divsf3+0x18>
 a8c:	cc c0       	rjmp	.+408    	; 0xc26 <__fp_inf>
 a8e:	51 11       	cpse	r21, r1
 a90:	15 c1       	rjmp	.+554    	; 0xcbc <__fp_szero>
 a92:	cf c0       	rjmp	.+414    	; 0xc32 <__fp_nan>

00000a94 <__divsf3x>:
 a94:	f0 d0       	rcall	.+480    	; 0xc76 <__fp_split3>
 a96:	98 f3       	brcs	.-26     	; 0xa7e <__divsf3+0x4>

00000a98 <__divsf3_pse>:
 a98:	99 23       	and	r25, r25
 a9a:	c9 f3       	breq	.-14     	; 0xa8e <__divsf3+0x14>
 a9c:	55 23       	and	r21, r21
 a9e:	b1 f3       	breq	.-20     	; 0xa8c <__divsf3+0x12>
 aa0:	95 1b       	sub	r25, r21
 aa2:	55 0b       	sbc	r21, r21
 aa4:	bb 27       	eor	r27, r27
 aa6:	aa 27       	eor	r26, r26
 aa8:	62 17       	cp	r22, r18
 aaa:	73 07       	cpc	r23, r19
 aac:	84 07       	cpc	r24, r20
 aae:	38 f0       	brcs	.+14     	; 0xabe <__divsf3_pse+0x26>
 ab0:	9f 5f       	subi	r25, 0xFF	; 255
 ab2:	5f 4f       	sbci	r21, 0xFF	; 255
 ab4:	22 0f       	add	r18, r18
 ab6:	33 1f       	adc	r19, r19
 ab8:	44 1f       	adc	r20, r20
 aba:	aa 1f       	adc	r26, r26
 abc:	a9 f3       	breq	.-22     	; 0xaa8 <__divsf3_pse+0x10>
 abe:	33 d0       	rcall	.+102    	; 0xb26 <__divsf3_pse+0x8e>
 ac0:	0e 2e       	mov	r0, r30
 ac2:	3a f0       	brmi	.+14     	; 0xad2 <__divsf3_pse+0x3a>
 ac4:	e0 e8       	ldi	r30, 0x80	; 128
 ac6:	30 d0       	rcall	.+96     	; 0xb28 <__divsf3_pse+0x90>
 ac8:	91 50       	subi	r25, 0x01	; 1
 aca:	50 40       	sbci	r21, 0x00	; 0
 acc:	e6 95       	lsr	r30
 ace:	00 1c       	adc	r0, r0
 ad0:	ca f7       	brpl	.-14     	; 0xac4 <__divsf3_pse+0x2c>
 ad2:	29 d0       	rcall	.+82     	; 0xb26 <__divsf3_pse+0x8e>
 ad4:	fe 2f       	mov	r31, r30
 ad6:	27 d0       	rcall	.+78     	; 0xb26 <__divsf3_pse+0x8e>
 ad8:	66 0f       	add	r22, r22
 ada:	77 1f       	adc	r23, r23
 adc:	88 1f       	adc	r24, r24
 ade:	bb 1f       	adc	r27, r27
 ae0:	26 17       	cp	r18, r22
 ae2:	37 07       	cpc	r19, r23
 ae4:	48 07       	cpc	r20, r24
 ae6:	ab 07       	cpc	r26, r27
 ae8:	b0 e8       	ldi	r27, 0x80	; 128
 aea:	09 f0       	breq	.+2      	; 0xaee <__divsf3_pse+0x56>
 aec:	bb 0b       	sbc	r27, r27
 aee:	80 2d       	mov	r24, r0
 af0:	bf 01       	movw	r22, r30
 af2:	ff 27       	eor	r31, r31
 af4:	93 58       	subi	r25, 0x83	; 131
 af6:	5f 4f       	sbci	r21, 0xFF	; 255
 af8:	2a f0       	brmi	.+10     	; 0xb04 <__divsf3_pse+0x6c>
 afa:	9e 3f       	cpi	r25, 0xFE	; 254
 afc:	51 05       	cpc	r21, r1
 afe:	68 f0       	brcs	.+26     	; 0xb1a <__divsf3_pse+0x82>
 b00:	92 c0       	rjmp	.+292    	; 0xc26 <__fp_inf>
 b02:	dc c0       	rjmp	.+440    	; 0xcbc <__fp_szero>
 b04:	5f 3f       	cpi	r21, 0xFF	; 255
 b06:	ec f3       	brlt	.-6      	; 0xb02 <__divsf3_pse+0x6a>
 b08:	98 3e       	cpi	r25, 0xE8	; 232
 b0a:	dc f3       	brlt	.-10     	; 0xb02 <__divsf3_pse+0x6a>
 b0c:	86 95       	lsr	r24
 b0e:	77 95       	ror	r23
 b10:	67 95       	ror	r22
 b12:	b7 95       	ror	r27
 b14:	f7 95       	ror	r31
 b16:	9f 5f       	subi	r25, 0xFF	; 255
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__divsf3_pse+0x74>
 b1a:	88 0f       	add	r24, r24
 b1c:	91 1d       	adc	r25, r1
 b1e:	96 95       	lsr	r25
 b20:	87 95       	ror	r24
 b22:	97 f9       	bld	r25, 7
 b24:	08 95       	ret
 b26:	e1 e0       	ldi	r30, 0x01	; 1
 b28:	66 0f       	add	r22, r22
 b2a:	77 1f       	adc	r23, r23
 b2c:	88 1f       	adc	r24, r24
 b2e:	bb 1f       	adc	r27, r27
 b30:	62 17       	cp	r22, r18
 b32:	73 07       	cpc	r23, r19
 b34:	84 07       	cpc	r24, r20
 b36:	ba 07       	cpc	r27, r26
 b38:	20 f0       	brcs	.+8      	; 0xb42 <__divsf3_pse+0xaa>
 b3a:	62 1b       	sub	r22, r18
 b3c:	73 0b       	sbc	r23, r19
 b3e:	84 0b       	sbc	r24, r20
 b40:	ba 0b       	sbc	r27, r26
 b42:	ee 1f       	adc	r30, r30
 b44:	88 f7       	brcc	.-30     	; 0xb28 <__divsf3_pse+0x90>
 b46:	e0 95       	com	r30
 b48:	08 95       	ret

00000b4a <__fixsfsi>:
 b4a:	04 d0       	rcall	.+8      	; 0xb54 <__fixunssfsi>
 b4c:	68 94       	set
 b4e:	b1 11       	cpse	r27, r1
 b50:	b5 c0       	rjmp	.+362    	; 0xcbc <__fp_szero>
 b52:	08 95       	ret

00000b54 <__fixunssfsi>:
 b54:	98 d0       	rcall	.+304    	; 0xc86 <__fp_splitA>
 b56:	88 f0       	brcs	.+34     	; 0xb7a <__fixunssfsi+0x26>
 b58:	9f 57       	subi	r25, 0x7F	; 127
 b5a:	90 f0       	brcs	.+36     	; 0xb80 <__fixunssfsi+0x2c>
 b5c:	b9 2f       	mov	r27, r25
 b5e:	99 27       	eor	r25, r25
 b60:	b7 51       	subi	r27, 0x17	; 23
 b62:	a0 f0       	brcs	.+40     	; 0xb8c <__fixunssfsi+0x38>
 b64:	d1 f0       	breq	.+52     	; 0xb9a <__fixunssfsi+0x46>
 b66:	66 0f       	add	r22, r22
 b68:	77 1f       	adc	r23, r23
 b6a:	88 1f       	adc	r24, r24
 b6c:	99 1f       	adc	r25, r25
 b6e:	1a f0       	brmi	.+6      	; 0xb76 <__fixunssfsi+0x22>
 b70:	ba 95       	dec	r27
 b72:	c9 f7       	brne	.-14     	; 0xb66 <__fixunssfsi+0x12>
 b74:	12 c0       	rjmp	.+36     	; 0xb9a <__fixunssfsi+0x46>
 b76:	b1 30       	cpi	r27, 0x01	; 1
 b78:	81 f0       	breq	.+32     	; 0xb9a <__fixunssfsi+0x46>
 b7a:	9f d0       	rcall	.+318    	; 0xcba <__fp_zero>
 b7c:	b1 e0       	ldi	r27, 0x01	; 1
 b7e:	08 95       	ret
 b80:	9c c0       	rjmp	.+312    	; 0xcba <__fp_zero>
 b82:	67 2f       	mov	r22, r23
 b84:	78 2f       	mov	r23, r24
 b86:	88 27       	eor	r24, r24
 b88:	b8 5f       	subi	r27, 0xF8	; 248
 b8a:	39 f0       	breq	.+14     	; 0xb9a <__fixunssfsi+0x46>
 b8c:	b9 3f       	cpi	r27, 0xF9	; 249
 b8e:	cc f3       	brlt	.-14     	; 0xb82 <__fixunssfsi+0x2e>
 b90:	86 95       	lsr	r24
 b92:	77 95       	ror	r23
 b94:	67 95       	ror	r22
 b96:	b3 95       	inc	r27
 b98:	d9 f7       	brne	.-10     	; 0xb90 <__fixunssfsi+0x3c>
 b9a:	3e f4       	brtc	.+14     	; 0xbaa <__fixunssfsi+0x56>
 b9c:	90 95       	com	r25
 b9e:	80 95       	com	r24
 ba0:	70 95       	com	r23
 ba2:	61 95       	neg	r22
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__floatunsisf>:
 bac:	e8 94       	clt
 bae:	09 c0       	rjmp	.+18     	; 0xbc2 <__floatsisf+0x12>

00000bb0 <__floatsisf>:
 bb0:	97 fb       	bst	r25, 7
 bb2:	3e f4       	brtc	.+14     	; 0xbc2 <__floatsisf+0x12>
 bb4:	90 95       	com	r25
 bb6:	80 95       	com	r24
 bb8:	70 95       	com	r23
 bba:	61 95       	neg	r22
 bbc:	7f 4f       	sbci	r23, 0xFF	; 255
 bbe:	8f 4f       	sbci	r24, 0xFF	; 255
 bc0:	9f 4f       	sbci	r25, 0xFF	; 255
 bc2:	99 23       	and	r25, r25
 bc4:	a9 f0       	breq	.+42     	; 0xbf0 <__floatsisf+0x40>
 bc6:	f9 2f       	mov	r31, r25
 bc8:	96 e9       	ldi	r25, 0x96	; 150
 bca:	bb 27       	eor	r27, r27
 bcc:	93 95       	inc	r25
 bce:	f6 95       	lsr	r31
 bd0:	87 95       	ror	r24
 bd2:	77 95       	ror	r23
 bd4:	67 95       	ror	r22
 bd6:	b7 95       	ror	r27
 bd8:	f1 11       	cpse	r31, r1
 bda:	f8 cf       	rjmp	.-16     	; 0xbcc <__floatsisf+0x1c>
 bdc:	fa f4       	brpl	.+62     	; 0xc1c <__floatsisf+0x6c>
 bde:	bb 0f       	add	r27, r27
 be0:	11 f4       	brne	.+4      	; 0xbe6 <__floatsisf+0x36>
 be2:	60 ff       	sbrs	r22, 0
 be4:	1b c0       	rjmp	.+54     	; 0xc1c <__floatsisf+0x6c>
 be6:	6f 5f       	subi	r22, 0xFF	; 255
 be8:	7f 4f       	sbci	r23, 0xFF	; 255
 bea:	8f 4f       	sbci	r24, 0xFF	; 255
 bec:	9f 4f       	sbci	r25, 0xFF	; 255
 bee:	16 c0       	rjmp	.+44     	; 0xc1c <__floatsisf+0x6c>
 bf0:	88 23       	and	r24, r24
 bf2:	11 f0       	breq	.+4      	; 0xbf8 <__floatsisf+0x48>
 bf4:	96 e9       	ldi	r25, 0x96	; 150
 bf6:	11 c0       	rjmp	.+34     	; 0xc1a <__floatsisf+0x6a>
 bf8:	77 23       	and	r23, r23
 bfa:	21 f0       	breq	.+8      	; 0xc04 <__floatsisf+0x54>
 bfc:	9e e8       	ldi	r25, 0x8E	; 142
 bfe:	87 2f       	mov	r24, r23
 c00:	76 2f       	mov	r23, r22
 c02:	05 c0       	rjmp	.+10     	; 0xc0e <__floatsisf+0x5e>
 c04:	66 23       	and	r22, r22
 c06:	71 f0       	breq	.+28     	; 0xc24 <__floatsisf+0x74>
 c08:	96 e8       	ldi	r25, 0x86	; 134
 c0a:	86 2f       	mov	r24, r22
 c0c:	70 e0       	ldi	r23, 0x00	; 0
 c0e:	60 e0       	ldi	r22, 0x00	; 0
 c10:	2a f0       	brmi	.+10     	; 0xc1c <__floatsisf+0x6c>
 c12:	9a 95       	dec	r25
 c14:	66 0f       	add	r22, r22
 c16:	77 1f       	adc	r23, r23
 c18:	88 1f       	adc	r24, r24
 c1a:	da f7       	brpl	.-10     	; 0xc12 <__floatsisf+0x62>
 c1c:	88 0f       	add	r24, r24
 c1e:	96 95       	lsr	r25
 c20:	87 95       	ror	r24
 c22:	97 f9       	bld	r25, 7
 c24:	08 95       	ret

00000c26 <__fp_inf>:
 c26:	97 f9       	bld	r25, 7
 c28:	9f 67       	ori	r25, 0x7F	; 127
 c2a:	80 e8       	ldi	r24, 0x80	; 128
 c2c:	70 e0       	ldi	r23, 0x00	; 0
 c2e:	60 e0       	ldi	r22, 0x00	; 0
 c30:	08 95       	ret

00000c32 <__fp_nan>:
 c32:	9f ef       	ldi	r25, 0xFF	; 255
 c34:	80 ec       	ldi	r24, 0xC0	; 192
 c36:	08 95       	ret

00000c38 <__fp_pscA>:
 c38:	00 24       	eor	r0, r0
 c3a:	0a 94       	dec	r0
 c3c:	16 16       	cp	r1, r22
 c3e:	17 06       	cpc	r1, r23
 c40:	18 06       	cpc	r1, r24
 c42:	09 06       	cpc	r0, r25
 c44:	08 95       	ret

00000c46 <__fp_pscB>:
 c46:	00 24       	eor	r0, r0
 c48:	0a 94       	dec	r0
 c4a:	12 16       	cp	r1, r18
 c4c:	13 06       	cpc	r1, r19
 c4e:	14 06       	cpc	r1, r20
 c50:	05 06       	cpc	r0, r21
 c52:	08 95       	ret

00000c54 <__fp_round>:
 c54:	09 2e       	mov	r0, r25
 c56:	03 94       	inc	r0
 c58:	00 0c       	add	r0, r0
 c5a:	11 f4       	brne	.+4      	; 0xc60 <__fp_round+0xc>
 c5c:	88 23       	and	r24, r24
 c5e:	52 f0       	brmi	.+20     	; 0xc74 <__fp_round+0x20>
 c60:	bb 0f       	add	r27, r27
 c62:	40 f4       	brcc	.+16     	; 0xc74 <__fp_round+0x20>
 c64:	bf 2b       	or	r27, r31
 c66:	11 f4       	brne	.+4      	; 0xc6c <__fp_round+0x18>
 c68:	60 ff       	sbrs	r22, 0
 c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__fp_round+0x20>
 c6c:	6f 5f       	subi	r22, 0xFF	; 255
 c6e:	7f 4f       	sbci	r23, 0xFF	; 255
 c70:	8f 4f       	sbci	r24, 0xFF	; 255
 c72:	9f 4f       	sbci	r25, 0xFF	; 255
 c74:	08 95       	ret

00000c76 <__fp_split3>:
 c76:	57 fd       	sbrc	r21, 7
 c78:	90 58       	subi	r25, 0x80	; 128
 c7a:	44 0f       	add	r20, r20
 c7c:	55 1f       	adc	r21, r21
 c7e:	59 f0       	breq	.+22     	; 0xc96 <__fp_splitA+0x10>
 c80:	5f 3f       	cpi	r21, 0xFF	; 255
 c82:	71 f0       	breq	.+28     	; 0xca0 <__fp_splitA+0x1a>
 c84:	47 95       	ror	r20

00000c86 <__fp_splitA>:
 c86:	88 0f       	add	r24, r24
 c88:	97 fb       	bst	r25, 7
 c8a:	99 1f       	adc	r25, r25
 c8c:	61 f0       	breq	.+24     	; 0xca6 <__fp_splitA+0x20>
 c8e:	9f 3f       	cpi	r25, 0xFF	; 255
 c90:	79 f0       	breq	.+30     	; 0xcb0 <__fp_splitA+0x2a>
 c92:	87 95       	ror	r24
 c94:	08 95       	ret
 c96:	12 16       	cp	r1, r18
 c98:	13 06       	cpc	r1, r19
 c9a:	14 06       	cpc	r1, r20
 c9c:	55 1f       	adc	r21, r21
 c9e:	f2 cf       	rjmp	.-28     	; 0xc84 <__fp_split3+0xe>
 ca0:	46 95       	lsr	r20
 ca2:	f1 df       	rcall	.-30     	; 0xc86 <__fp_splitA>
 ca4:	08 c0       	rjmp	.+16     	; 0xcb6 <__fp_splitA+0x30>
 ca6:	16 16       	cp	r1, r22
 ca8:	17 06       	cpc	r1, r23
 caa:	18 06       	cpc	r1, r24
 cac:	99 1f       	adc	r25, r25
 cae:	f1 cf       	rjmp	.-30     	; 0xc92 <__fp_splitA+0xc>
 cb0:	86 95       	lsr	r24
 cb2:	71 05       	cpc	r23, r1
 cb4:	61 05       	cpc	r22, r1
 cb6:	08 94       	sec
 cb8:	08 95       	ret

00000cba <__fp_zero>:
 cba:	e8 94       	clt

00000cbc <__fp_szero>:
 cbc:	bb 27       	eor	r27, r27
 cbe:	66 27       	eor	r22, r22
 cc0:	77 27       	eor	r23, r23
 cc2:	cb 01       	movw	r24, r22
 cc4:	97 f9       	bld	r25, 7
 cc6:	08 95       	ret

00000cc8 <round>:
 cc8:	de df       	rcall	.-68     	; 0xc86 <__fp_splitA>
 cca:	e0 f0       	brcs	.+56     	; 0xd04 <round+0x3c>
 ccc:	9e 37       	cpi	r25, 0x7E	; 126
 cce:	d8 f0       	brcs	.+54     	; 0xd06 <round+0x3e>
 cd0:	96 39       	cpi	r25, 0x96	; 150
 cd2:	b8 f4       	brcc	.+46     	; 0xd02 <round+0x3a>
 cd4:	9e 38       	cpi	r25, 0x8E	; 142
 cd6:	48 f4       	brcc	.+18     	; 0xcea <round+0x22>
 cd8:	67 2f       	mov	r22, r23
 cda:	78 2f       	mov	r23, r24
 cdc:	88 27       	eor	r24, r24
 cde:	98 5f       	subi	r25, 0xF8	; 248
 ce0:	f9 cf       	rjmp	.-14     	; 0xcd4 <round+0xc>
 ce2:	86 95       	lsr	r24
 ce4:	77 95       	ror	r23
 ce6:	67 95       	ror	r22
 ce8:	93 95       	inc	r25
 cea:	95 39       	cpi	r25, 0x95	; 149
 cec:	d0 f3       	brcs	.-12     	; 0xce2 <round+0x1a>
 cee:	b6 2f       	mov	r27, r22
 cf0:	b1 70       	andi	r27, 0x01	; 1
 cf2:	6b 0f       	add	r22, r27
 cf4:	71 1d       	adc	r23, r1
 cf6:	81 1d       	adc	r24, r1
 cf8:	20 f4       	brcc	.+8      	; 0xd02 <round+0x3a>
 cfa:	87 95       	ror	r24
 cfc:	77 95       	ror	r23
 cfe:	67 95       	ror	r22
 d00:	93 95       	inc	r25
 d02:	02 c0       	rjmp	.+4      	; 0xd08 <__fp_mintl>
 d04:	1c c0       	rjmp	.+56     	; 0xd3e <__fp_mpack>
 d06:	da cf       	rjmp	.-76     	; 0xcbc <__fp_szero>

00000d08 <__fp_mintl>:
 d08:	88 23       	and	r24, r24
 d0a:	71 f4       	brne	.+28     	; 0xd28 <__fp_mintl+0x20>
 d0c:	77 23       	and	r23, r23
 d0e:	21 f0       	breq	.+8      	; 0xd18 <__fp_mintl+0x10>
 d10:	98 50       	subi	r25, 0x08	; 8
 d12:	87 2b       	or	r24, r23
 d14:	76 2f       	mov	r23, r22
 d16:	07 c0       	rjmp	.+14     	; 0xd26 <__fp_mintl+0x1e>
 d18:	66 23       	and	r22, r22
 d1a:	11 f4       	brne	.+4      	; 0xd20 <__fp_mintl+0x18>
 d1c:	99 27       	eor	r25, r25
 d1e:	0d c0       	rjmp	.+26     	; 0xd3a <__fp_mintl+0x32>
 d20:	90 51       	subi	r25, 0x10	; 16
 d22:	86 2b       	or	r24, r22
 d24:	70 e0       	ldi	r23, 0x00	; 0
 d26:	60 e0       	ldi	r22, 0x00	; 0
 d28:	2a f0       	brmi	.+10     	; 0xd34 <__fp_mintl+0x2c>
 d2a:	9a 95       	dec	r25
 d2c:	66 0f       	add	r22, r22
 d2e:	77 1f       	adc	r23, r23
 d30:	88 1f       	adc	r24, r24
 d32:	da f7       	brpl	.-10     	; 0xd2a <__fp_mintl+0x22>
 d34:	88 0f       	add	r24, r24
 d36:	96 95       	lsr	r25
 d38:	87 95       	ror	r24
 d3a:	97 f9       	bld	r25, 7
 d3c:	08 95       	ret

00000d3e <__fp_mpack>:
 d3e:	9f 3f       	cpi	r25, 0xFF	; 255
 d40:	31 f0       	breq	.+12     	; 0xd4e <__fp_mpack_finite+0xc>

00000d42 <__fp_mpack_finite>:
 d42:	91 50       	subi	r25, 0x01	; 1
 d44:	20 f4       	brcc	.+8      	; 0xd4e <__fp_mpack_finite+0xc>
 d46:	87 95       	ror	r24
 d48:	77 95       	ror	r23
 d4a:	67 95       	ror	r22
 d4c:	b7 95       	ror	r27
 d4e:	88 0f       	add	r24, r24
 d50:	91 1d       	adc	r25, r1
 d52:	96 95       	lsr	r25
 d54:	87 95       	ror	r24
 d56:	97 f9       	bld	r25, 7
 d58:	08 95       	ret

00000d5a <__udivmodsi4>:
 d5a:	a1 e2       	ldi	r26, 0x21	; 33
 d5c:	1a 2e       	mov	r1, r26
 d5e:	aa 1b       	sub	r26, r26
 d60:	bb 1b       	sub	r27, r27
 d62:	fd 01       	movw	r30, r26
 d64:	0d c0       	rjmp	.+26     	; 0xd80 <__udivmodsi4_ep>

00000d66 <__udivmodsi4_loop>:
 d66:	aa 1f       	adc	r26, r26
 d68:	bb 1f       	adc	r27, r27
 d6a:	ee 1f       	adc	r30, r30
 d6c:	ff 1f       	adc	r31, r31
 d6e:	a2 17       	cp	r26, r18
 d70:	b3 07       	cpc	r27, r19
 d72:	e4 07       	cpc	r30, r20
 d74:	f5 07       	cpc	r31, r21
 d76:	20 f0       	brcs	.+8      	; 0xd80 <__udivmodsi4_ep>
 d78:	a2 1b       	sub	r26, r18
 d7a:	b3 0b       	sbc	r27, r19
 d7c:	e4 0b       	sbc	r30, r20
 d7e:	f5 0b       	sbc	r31, r21

00000d80 <__udivmodsi4_ep>:
 d80:	66 1f       	adc	r22, r22
 d82:	77 1f       	adc	r23, r23
 d84:	88 1f       	adc	r24, r24
 d86:	99 1f       	adc	r25, r25
 d88:	1a 94       	dec	r1
 d8a:	69 f7       	brne	.-38     	; 0xd66 <__udivmodsi4_loop>
 d8c:	60 95       	com	r22
 d8e:	70 95       	com	r23
 d90:	80 95       	com	r24
 d92:	90 95       	com	r25
 d94:	9b 01       	movw	r18, r22
 d96:	ac 01       	movw	r20, r24
 d98:	bd 01       	movw	r22, r26
 d9a:	cf 01       	movw	r24, r30
 d9c:	08 95       	ret

00000d9e <_exit>:
 d9e:	f8 94       	cli

00000da0 <__stop_program>:
 da0:	ff cf       	rjmp	.-2      	; 0xda0 <__stop_program>
